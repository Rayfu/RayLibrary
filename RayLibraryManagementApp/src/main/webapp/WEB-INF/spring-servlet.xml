<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
 
    <!-- It register the beans in context and scan the annotations inside beans and activate them -->
    <context:component-scan base-package="com.src" />
    
    <!-- This allow for dispatching requests to Controllers by registering 
    two beans - DefaultAnnotationHandlerMapping and AnnotationMethodHandlerAdapter -->
    <mvc:annotation-driven />
     
    <!-- This helps in mapping the logical view names to directly view files under a certain pre-configured directory -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>
     
    <!-- This resolves messages from resource bundles for different locales --> 
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="messages" />
    </bean>
    
    <!-- This helps in adding the css and js files.--> 
    <mvc:resources mapping="/resources/**" location="/resources/" />

   
    <!-- This produces a container-managed EntityManagerFactory; 
    rather than application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean-->
    <bean id="entityManagerFactoryBean" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!--       This makes /META-INF/persistence.xml is no longer necessary -->
        <property name="packagesToScan" value="com.src.model" />
        <!--       JpaVendorAdapter implementation for Hibernate EntityManager.
        Exposes Hibernate's persistence provider and EntityManager extension interface -->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
        </property>
        <!--      <property name="jpaProperties">
        <props>
           <prop key="hibernate.hbm2ddl.auto">validate</prop>
           <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
           <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
           <prop key="hibernate.show_sql">true</prop>
           <prop key="hibernate.transaction.auto_close_session">true</prop>
           <prop key="hibernate.hibernate.connection.release_mode">true</prop>
        </props>-->
        <property name="jpaProperties">
            <props>
                <!--<prop key="hibernate.hbm2ddl.auto">validate</prop>-->
                <!--<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>-->
                <!--<Drop and re-create the database schema on startup-->
                <prop key="hibernate.hbm2ddl.auto">create</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
                <prop key="hibernate.hbm2ddl.import_files">import.sql</prop>
            </props>
        </property>
    </bean>
 
    <!--    Simple implementation of the standard JDBC DataSource interface, 
    configuring the plain old JDBC DriverManager via bean properties -->
    <!--    <bean id="inmemoryDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.h2.Driver" />
        <property name="url" value="jdbc:h2:mem:test;DB_CLOSE_DELAY=-1" />
        <property name="username" value="sa" />
        <property name="password" value="" />
    </bean>-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.hsqldb.jdbcDriver" />
        <property name="url" value="jdbc:hsqldb:mem://productDb" />
        <property name="username" value="sa" />
        <property name="password" value="" />
    </bean>

    <!-- This transaction manager is appropriate for applications that use a single JPA EntityManagerFactory for transactional data access. 
    JTA (usually through JtaTransactionManager) is necessary for accessing multiple transactional resources within the same transaction. -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactoryBean" />
    </bean>
   
    <!-- responsible for registering the necessary Spring components that power annotation-driven transaction management; 
    such as when @Transactional methods are invoked -->
    <tx:annotation-driven />
   
</beans>